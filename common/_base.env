# =========== CONSTANTS ===========

# Return values
readonly RET_success=0
readonly RET_error=1
readonly RET_usage=2
readonly RET_help=2

# Colors
readonly RCol='\033[0m'                 # Text Reset
readonly Whi='\033[0;37m'               # White, for small details
readonly Red='\033[0;31m'               # Red, for small details
readonly Gre='\033[0;32m'               # Green, for small details
readonly Yel='\033[0;33m'               # Yellow, for mid-building
readonly BRed='\033[1;31m'              # Bold Red, when an error occurred
readonly BGre='\033[1;32m'              # Bold Green, for successes
readonly BYel='\033[1;33m'              # Bold Yellow, when building stuff
readonly BWhi='\033[1;37m'              # Bold White, when beginning something
readonly URed='\033[4;31m'              # Underline Red, for warnings
readonly UGre='\033[4;32m'              # Underline Green, for smaller successes
readonly UBlu='\033[4;34m'              # Underline Blue, for links
readonly UWhi='\033[4;37m'              # Underline White, for commands

# Strings
readonly Success="${BGre}Success${RCol}"
readonly Note="${UWhi}Notice${RCol}"
readonly Warn="${BYel}Warning${RCol}"
readonly Err="${BRed}Error${RCol}"


# =========== FUNCTIONS ===========

### Printing text
function println {
	printf "$@\n"
}

function print_progress {
	println "${BYel}$1${RCol}" ${@:2}
}
function print_success {
	printf "${UGre}Success${RCol}"
	test $# -gt 0 && println "${Gre}: ${RCol}$1" ${@:2}
}
function print_failure {
	>&2 printf "${URed}Failure${RCol}"
	test $# -gt 0 && >&2 println "${Red}: ${RCol}$1" ${@:2}
}
function print_error {
	>&2 printf "${BRed}Error${RCol}"
	test $# -gt 0 && >&2 println "${Red}: ${RCol}$1" ${@:2}
}


# Checks for given binaries. Returns
function needs {
	for requirement in $@; do
		which $requirement > /dev/null
		if [ $? != 0 ]; then
			echo -e "$Err \"$requirement\" is NOT installed."
			return $RET_error
		fi
	done

	return $RET_success
}

# Returns the absolute directory of the given path
function get_absolute_dir {
	# $1 : directory to parse
	cd "$1" > /dev/null
	temp_dir="$(pwd)"
	cd - > /dev/null
	echo "$temp_dir"
}

# Checks if string $2 is in $1
function StringContains {
	[ "${1##*$2*}" ];
}
